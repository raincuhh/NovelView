/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UnauthorizedImport } from './routes/unauthorized'
import { Route as TestImport } from './routes/test'
import { Route as OnboardingRouteImport } from './routes/_onboarding/route'
import { Route as AppRouteImport } from './routes/_app/route'
import { Route as IndexImport } from './routes/index'
import { Route as LegalTosImport } from './routes/legal/tos'
import { Route as LegalPrivacyPolicyImport } from './routes/legal/privacy-policy'
import { Route as OnboardingOnboardingImport } from './routes/_onboarding/onboarding'
import { Route as AppSearchImport } from './routes/_app/search'
import { Route as AppHomeImport } from './routes/_app/home'

// Create/Update Routes

const UnauthorizedRoute = UnauthorizedImport.update({
  id: '/unauthorized',
  path: '/unauthorized',
  getParentRoute: () => rootRoute,
} as any)

const TestRoute = TestImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRoute,
} as any)

const OnboardingRouteRoute = OnboardingRouteImport.update({
  id: '/_onboarding',
  getParentRoute: () => rootRoute,
} as any)

const AppRouteRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LegalTosRoute = LegalTosImport.update({
  id: '/legal/tos',
  path: '/legal/tos',
  getParentRoute: () => rootRoute,
} as any)

const LegalPrivacyPolicyRoute = LegalPrivacyPolicyImport.update({
  id: '/legal/privacy-policy',
  path: '/legal/privacy-policy',
  getParentRoute: () => rootRoute,
} as any)

const OnboardingOnboardingRoute = OnboardingOnboardingImport.update({
  id: '/onboarding',
  path: '/onboarding',
  getParentRoute: () => OnboardingRouteRoute,
} as any)

const AppSearchRoute = AppSearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppHomeRoute = AppHomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => AppRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/_onboarding': {
      id: '/_onboarding'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof OnboardingRouteImport
      parentRoute: typeof rootRoute
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestImport
      parentRoute: typeof rootRoute
    }
    '/unauthorized': {
      id: '/unauthorized'
      path: '/unauthorized'
      fullPath: '/unauthorized'
      preLoaderRoute: typeof UnauthorizedImport
      parentRoute: typeof rootRoute
    }
    '/_app/home': {
      id: '/_app/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof AppHomeImport
      parentRoute: typeof AppRouteImport
    }
    '/_app/search': {
      id: '/_app/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof AppSearchImport
      parentRoute: typeof AppRouteImport
    }
    '/_onboarding/onboarding': {
      id: '/_onboarding/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof OnboardingOnboardingImport
      parentRoute: typeof OnboardingRouteImport
    }
    '/legal/privacy-policy': {
      id: '/legal/privacy-policy'
      path: '/legal/privacy-policy'
      fullPath: '/legal/privacy-policy'
      preLoaderRoute: typeof LegalPrivacyPolicyImport
      parentRoute: typeof rootRoute
    }
    '/legal/tos': {
      id: '/legal/tos'
      path: '/legal/tos'
      fullPath: '/legal/tos'
      preLoaderRoute: typeof LegalTosImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AppRouteRouteChildren {
  AppHomeRoute: typeof AppHomeRoute
  AppSearchRoute: typeof AppSearchRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppHomeRoute: AppHomeRoute,
  AppSearchRoute: AppSearchRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface OnboardingRouteRouteChildren {
  OnboardingOnboardingRoute: typeof OnboardingOnboardingRoute
}

const OnboardingRouteRouteChildren: OnboardingRouteRouteChildren = {
  OnboardingOnboardingRoute: OnboardingOnboardingRoute,
}

const OnboardingRouteRouteWithChildren = OnboardingRouteRoute._addFileChildren(
  OnboardingRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof OnboardingRouteRouteWithChildren
  '/test': typeof TestRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/home': typeof AppHomeRoute
  '/search': typeof AppSearchRoute
  '/onboarding': typeof OnboardingOnboardingRoute
  '/legal/privacy-policy': typeof LegalPrivacyPolicyRoute
  '/legal/tos': typeof LegalTosRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof OnboardingRouteRouteWithChildren
  '/test': typeof TestRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/home': typeof AppHomeRoute
  '/search': typeof AppSearchRoute
  '/onboarding': typeof OnboardingOnboardingRoute
  '/legal/privacy-policy': typeof LegalPrivacyPolicyRoute
  '/legal/tos': typeof LegalTosRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_app': typeof AppRouteRouteWithChildren
  '/_onboarding': typeof OnboardingRouteRouteWithChildren
  '/test': typeof TestRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/_app/home': typeof AppHomeRoute
  '/_app/search': typeof AppSearchRoute
  '/_onboarding/onboarding': typeof OnboardingOnboardingRoute
  '/legal/privacy-policy': typeof LegalPrivacyPolicyRoute
  '/legal/tos': typeof LegalTosRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/test'
    | '/unauthorized'
    | '/home'
    | '/search'
    | '/onboarding'
    | '/legal/privacy-policy'
    | '/legal/tos'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/test'
    | '/unauthorized'
    | '/home'
    | '/search'
    | '/onboarding'
    | '/legal/privacy-policy'
    | '/legal/tos'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/_onboarding'
    | '/test'
    | '/unauthorized'
    | '/_app/home'
    | '/_app/search'
    | '/_onboarding/onboarding'
    | '/legal/privacy-policy'
    | '/legal/tos'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  OnboardingRouteRoute: typeof OnboardingRouteRouteWithChildren
  TestRoute: typeof TestRoute
  UnauthorizedRoute: typeof UnauthorizedRoute
  LegalPrivacyPolicyRoute: typeof LegalPrivacyPolicyRoute
  LegalTosRoute: typeof LegalTosRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  OnboardingRouteRoute: OnboardingRouteRouteWithChildren,
  TestRoute: TestRoute,
  UnauthorizedRoute: UnauthorizedRoute,
  LegalPrivacyPolicyRoute: LegalPrivacyPolicyRoute,
  LegalTosRoute: LegalTosRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_app",
        "/_onboarding",
        "/test",
        "/unauthorized",
        "/legal/privacy-policy",
        "/legal/tos"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_app": {
      "filePath": "_app/route.tsx",
      "children": [
        "/_app/home",
        "/_app/search"
      ]
    },
    "/_onboarding": {
      "filePath": "_onboarding/route.tsx",
      "children": [
        "/_onboarding/onboarding"
      ]
    },
    "/test": {
      "filePath": "test.tsx"
    },
    "/unauthorized": {
      "filePath": "unauthorized.tsx"
    },
    "/_app/home": {
      "filePath": "_app/home.tsx",
      "parent": "/_app"
    },
    "/_app/search": {
      "filePath": "_app/search.tsx",
      "parent": "/_app"
    },
    "/_onboarding/onboarding": {
      "filePath": "_onboarding/onboarding.tsx",
      "parent": "/_onboarding"
    },
    "/legal/privacy-policy": {
      "filePath": "legal/privacy-policy.tsx"
    },
    "/legal/tos": {
      "filePath": "legal/tos.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
